// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "BB backend",
    "title": "BB backend core",
    "version": "0.0.1"
  },
  "host": "localhost:8080",
  "basePath": "/api",
  "paths": {
    "/:short-url": {
      "get": {
        "security": [],
        "tags": [
          "Url"
        ],
        "summary": "return long url",
        "operationId": "getLong",
        "responses": {
          "301": {
            "description": "OK",
            "headers": {
              "Location": {
                "type": "string",
                "format": "url"
              }
            }
          },
          "404": {
            "$ref": "#/responses/not-found"
          },
          "503": {
            "description": "Returned if the service is detected as unhealthy",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/analytics/:short-url": {
      "get": {
        "security": [],
        "tags": [
          "Url"
        ],
        "summary": "return count of redirects from short url to long url",
        "operationId": "getAnalytics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "redirects": {
                  "type": "number"
                }
              }
            }
          },
          "404": {
            "$ref": "#/responses/not-found"
          },
          "503": {
            "description": "Returned if the service is detected as unhealthy",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/url": {
      "put": {
        "security": [],
        "tags": [
          "Url"
        ],
        "summary": "long url for shorting",
        "operationId": "putLong",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "longUrl": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "$ref": "#/responses/not-found"
          },
          "503": {
            "description": "Returned if the service is detected as unhealthy",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    }
  },
  "responses": {
    "forbidden": {
      "description": "Insufficient privilege to execute action.",
      "schema": {
        "$ref": "swagger/responses/error.v1.yaml"
      }
    },
    "invalid-request": {
      "description": "Invalid request",
      "schema": {
        "$ref": "swagger/responses/error.v1.yaml"
      }
    },
    "not-found": {
      "description": "Not found.",
      "schema": {
        "$ref": "swagger/responses/error.v1.yaml"
      }
    },
    "server-error": {
      "description": "Internal Server Error",
      "schema": {
        "$ref": "swagger/responses/error.v1.yaml"
      }
    },
    "unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "swagger/responses/error.v1.yaml"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "BB backend",
    "title": "BB backend core",
    "version": "0.0.1"
  },
  "host": "localhost:8080",
  "basePath": "/api",
  "paths": {
    "/:short-url": {
      "get": {
        "security": [],
        "tags": [
          "Url"
        ],
        "summary": "return long url",
        "operationId": "getLong",
        "responses": {
          "301": {
            "description": "OK",
            "headers": {
              "Location": {
                "type": "string",
                "format": "url"
              }
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/errorV1"
            }
          },
          "503": {
            "description": "Returned if the service is detected as unhealthy",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/analytics/:short-url": {
      "get": {
        "security": [],
        "tags": [
          "Url"
        ],
        "summary": "return count of redirects from short url to long url",
        "operationId": "getAnalytics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "redirects": {
                  "type": "number"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/errorV1"
            }
          },
          "503": {
            "description": "Returned if the service is detected as unhealthy",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/url": {
      "put": {
        "security": [],
        "tags": [
          "Url"
        ],
        "summary": "long url for shorting",
        "operationId": "putLong",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "longUrl": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/errorV1"
            }
          },
          "503": {
            "description": "Returned if the service is detected as unhealthy",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    }
  },
  "definitions": {
    "errorV1": {
      "description": "Standard error format",
      "type": "object",
      "title": "Error Response",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "forbidden": {
      "description": "Insufficient privilege to execute action.",
      "schema": {
        "$ref": "#/definitions/errorV1"
      }
    },
    "invalid-request": {
      "description": "Invalid request",
      "schema": {
        "$ref": "#/definitions/errorV1"
      }
    },
    "not-found": {
      "description": "Not found.",
      "schema": {
        "$ref": "#/definitions/errorV1"
      }
    },
    "server-error": {
      "description": "Internal Server Error",
      "schema": {
        "$ref": "#/definitions/errorV1"
      }
    },
    "unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/errorV1"
      }
    }
  }
}`))
}
